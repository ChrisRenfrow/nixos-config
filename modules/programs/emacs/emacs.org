#+title: My Literal Emacs Configuration
#+author: Chris Renfrow

* Overview

This Emacs config assumes everything is available via the load-path as
it will be under Nix.

* Early-initialization

** Startup

Measure and display startup time alongside number of garbage
collections.

#+begin_src emacs-lisp :tangle early-init.el

  (defun cr/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
      (format "%.2f seconds"
              (float-time
                (time-subtract after-init-time before-init-time)))
              gcs-done))

  (add-hook 'emacs-startup-hook #'cr/display-startup-time)

#+end_src

Ideally I would fine-tune this but after faffing about with it too
much one evening and not getting the results I want I've decided to
leave it at 20mb for now.

#+begin_src emacs-lisp :tangle early-init.el

  ;; Set default to 20mb (in bytes)
  (setq gc-cons-threshold (* 20 1000 1000))

#+end_src

** Native Comp

Everything is already built by Nix.

#+begin_src emacs-lisp :tangle early-init.el
  (setq comp-deferred-compilation nil)
#+end_src

** UI

#+begin_src emacs-lisp :tangle early-init.el

  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)

  (setq visible-bell t)
  (set-fringe-mode 10)

#+end_src

* Base

** Package Management
*** package-quickstart

This indicates that we would like to use generated package autoloads,
as they are provided by Nix.

#+begin_src emacs-lisp :tangle init.el
  (defvar package-quickstart t)
#+end_src

*** use-package

We require use-package during compilation but then disable most of
it's packaging features during compilation and runtime. We're really
only using it to define the list of packages we'd like nix to fetch.

#+begin_src emacs-lisp :tangle init.el

  (eval-when-compile
    (require 'use-package))

  (eval-and-compile
    (setq package-enable-at-startup nil)
    (setq use-package-ensure-function 'ignore)
    (setq package-archives nil))

#+end_src

** Some Variables

Just some helpful values and variables like my name, email, and
default font sizes. May expand later.

#+begin_src emacs-lisp :tangle init.el

  (setq name "Chris Renfrow"
        email "dev@chrisrenfrow.me")

  (defvar cr/default-font-size 100
    "Default font-size for fixed pitch (monospaced)")
  (defvar cr/default-variable-font-size 100
    "Default font-size for variable pitch")

  (defvar cr/projects-base-directory "~/projects/code"
    "The location I keep my code projects, mostly used by =projectile=") 

#+end_src

** No Littering

I don't want random files everywhere. And rather than track down
exactly what packages are generating these random files, I'll just
call for some help from [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]].

#+begin_src emacs-lisp :tangle init.el

  (use-package no-littering
    :ensure t
    :init
    (setq user-emacs-directory "~/.cache/emacs")
    :config
    ;; Move auto-save files
    (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Move custom into it's own file
    (setq custom-file (no-littering-expand-etc-file-name "custom.el")))

#+end_src

** Fonts

I'm using [[https://typeof.net/Iosevka/][Iosevka]] throughout.

#+begin_src emacs-lisp :tangle init.el

  ;; Fixed pitch
  (set-face-attribute 'default nil :font "Iosevka" :height cr/default-font-size)
  ;; Variable pitch
  (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height cr/default-variable-font-size :weight 'regular)

#+end_src

** Keybindings

I like my Vim-like key-bindings and functionality. So we're using
[[https://evil.readthedocs.io/en/latest/overview.html][extensible vi lâ€‹ayer]] (a.k.a. evil).

#+begin_src emacs-lisp :tangle init.el

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t
	  evil-want-keybinding nil)
    :config
    (evil-mode 1)
    ;; Use visual line motions outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

#+end_src

I'm also making use of [[https://github.com/noctuid/general.el][general]] to make it easy to define keybindings
as I go.

#+begin_src emacs-lisp :tangle init.el

  (use-package general
    :ensure t
    :after evil
    :config
    (general-create-definer cr/leader-key
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (cr/leader-key
    "t" '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "load new theme"))

#+end_src

* UI

** Line Numbers

#+begin_src emacs-lisp :tangle init.el

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** Color Theming

Here I use =doom-themes= to give myself plenty of variety when it comes
to theming. I've been enjoying light themes lately, so I set my
default to =doom-solarized-light=.

#+begin_src emacs-lisp :tangle init.el

  (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-solarized-light t))

#+end_src

** Modeline
*** all-the-icons

A prerequisite for =doom-modeline= (and other modes).

#+begin_src emacs-lisp :tangle init.el

  (use-package all-the-icons
    :ensure t)

#+end_src

*** doom-modeline

#+begin_src emacs-lisp :tangle init.el

  (use-package doom-modeline
    :ensure t
    :after (all-the-icons)
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 15)
             (doom-modeline-lsp t)
             (doom-modeline-github nil)
             (doom-modeline-minor-modes t)
             (doom-modeline-buffer-file-name-style 'truncate-except-project)))

#+end_src

*** minions

Reduce minor-mode clutter in the modeline.

#+begin_src emacs-lisp :tangle init.el

  (use-package minions
    :ensure t
    :config (minions-mode 1))
  
#+end_src

** Which Key

Which key lets me preview the available key combinations during any
part of entry. Very nice for a newbie like me.

#+begin_src emacs-lisp :tangle init.el

  (use-package which-key
    :ensure t
    :config
    (setq which-key-idle-delay 1)
    (which-key-mode))

#+end_src

** Ivy, Counsel, & Swiper

They're a package-deal more or less. From the [[https://github.com/abo-abo/swiper][repo]]:

#+begin_quote
Ivy, a generic completion mechanism for Emacs.

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

Swiper, an Ivy-enhanced alternative to Isearch.
#+end_quote

Here I'm mapping some Ivy functionality to respond to vi-like
commands. I'm also making sure my search queries don't start with ~^~ by
setting =ivy-initial-inputs-alist= to ~nil~.

#+begin_src emacs-lisp :tangle init.el

  (use-package ivy
    :ensure t
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search))
    :config
    (setq ivy-initial-inputs-alist nil)
    (ivy-mode 1))

#+end_src

*** ivy-rich

Enable ivy-rich, which just adds some handy columns to the ivy buffer.

#+begin_src emacs-lisp :tangle init.el

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

*** ivy-prescient

Adds prescient support to ivy buffers.

*Note:* Requires counsel to be loaded first.

#+begin_src emacs-lisp :tangle init.el

  (use-package ivy-prescient
    :ensure t
    :after counsel
    :config
    (prescient-persist-mode 1) ; Persist prescient sorting across sessions
    (ivy-prescient-mode 1))

#+end_src

*** flx

Adds fuzzy matching to most buffers. Here we set some limits for ivy
buffers.

#+begin_src emacs-lisp :tangle init.el

  (use-package flx
    :ensure t
    :init
    (setq ivy-flx-limit 1000))

#+end_src

*** Counsel

Enable counsel and override a couple of Emacs defaults with counsel
equivalents, namely =M-x= and =C-x C-f=.

#+begin_src emacs-lisp :tangle init.el

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

* Org Mode

** Font Setup

This makes org-mode headings more distinct by changing their height to
match their heading level. It also makes sure that source blocks and
such use fixed-width faces.

#+begin_src emacs-lisp :tangle init.el

  (defun cr/org-font-setup ()
      ;; Set faces for heading levels
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "Iosevka Etoile" :weight 'light :height (cdr face)))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil                 :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil               :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil                  :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil                 :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil              :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil       :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil             :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil              :inherit 'fixed-pitch)
      (set-face-attribute 'line-number nil               :inherit 'fixed-pitch)
      (set-face-attribute 'line-number-current-line nil  :inherit 'fixed-pitch))

#+end_src

** Base

#+begin_src emacs-lisp :tangle init.el

  (defun cr/org-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :ensure t
    :commands (org-capture org-agenda)
    :hook (org-mode . cr/org-setup)
    :config
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
    (setq org-startup-folded t)
    ;; More to come...
    (cr/org-font-setup))

#+end_src

** Babel

*** Babel Languages

#+begin_src emacs-lisp :tangle init.el

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)))
    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

Adds org structure templates for languages I commonly work with. Also
enables easy-templates, which turns the shortcut to generate an Emacs
Lisp source code block from =C-c C-, l e= to just =< e l TAB=.

*Note:* easy-templates don't seem to work?

#+begin_src emacs-lisp :tangle init.el

  (with-eval-after-load 'org
    ;; Required as of Org 9.2 to use easy-templates
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("nix" . "src nix"))
    (add-to-list 'org-structure-template-alist '("clang" . "src c"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))

#+end_src

* Code

** Treemacs

Enable and customize treemacs, a file browser buffer. Also add several
treemacs extensions that compliment other packages in use.

#+begin_src emacs-lisp :tangle init.el

  (use-package treemacs
    :ensure t)

  (use-package treemacs-all-the-icons
    :ensure t
    :after (treemacs all-the-icons)
    :config (treemacs-load-theme "all-the-icons"))
  
  (use-package treemacs-evil
    :ensure t
    :after (treemacs evil))

  (use-package treemacs-projectile
    :ensure t
    :after (treemacs projectile))

  (use-package treemacs-magit
    :ensure t
    :after (treemacs magit))

  (use-package treemacs-perspective
    :ensure t
    :after (treemacs persp-mode)
    :config (treemacs-set-scope-type 'Perspectives))

#+end_src

** Languages

*** Language Server Protocol (LSP)

Also known as "the one cool thing Microsoft ever did".

There's a lot going on with lsp-mode, so we've set a keymap prefix
paired with which-key integration to make it easy to explore.

#+begin_src emacs-lisp :tangle init.el
 
    (use-package lsp-mode
      :ensure t
      :commands (lsp lsp-deferred)
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (lsp-enable-which-key-integration t))

#+end_src

*** lsp-ui

Adds some UI enhancements for =lsp-mode= to give us that
comfy IDE vibe.

#+begin_src emacs-lisp :tangle init.el

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

Adds some lsp-specific using =treemacs=, like symbol information, type
hierarchy, and other things one might see in a modern IDE.

#+begin_src emacs-lisp :tangle init.el

  (use-package lsp-treemacs
    :ensure t
    :after lsp)

#+end_src

*** lsp-ivy

#+begin_src emacs-lisp :tangle init.el

  (use-package lsp-ivy
    :ensure t
    :after lsp)

#+end_src

*** C

*** Rust

*** Haskell

** Magit

#+begin_src emacs-lisp :tangle init.el

  (use-package magit
    :ensure t
    :commands magit-status)

#+end_src

** Company Mode

#+begin_src emacs-lisp :tangle init.el

  (use-package company
      :ensure t
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
	     ("<tab>" . company-complete-selection))
	    (:map lsp-mode-map
	     ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))

    (use-package company-box
      :ensure t
      :hook (company-mode . company-box-mode))
  
#+end_src

** Projectile

Project management library.

#+begin_src emacs-lisp :tangle init.el

  (defun cr/switch-project-action ()
    "Switch to a perspective named after the project, start `magit-status' and `treemacs'."
    (persp-switch (projectile-project-name))
    (magit-status)
    (treemacs))

  (use-package projectile
    :ensure t
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/projects/code")
      (setq projectile-project-search-path '("~/projects/code")))
    (setq projectile-switch-project-action #'cr/switch-project-action))

  (use-package counsel-projectile
    ;; Extremely slow for some reason, disabling for now
    :disabled
    :ensure t
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Perspective

Perspective gives us "lenses" to view our buffers through. Everything
is kept in it's assigned perspective, making it easy to switch between
several projects during one session.

#+begin_src emacs-lisp :tangle init.el

  (use-package perspective
    :ensure t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x b" . persp-counsel-switch-buffer*)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode))

#+end_src

** Commenting

Adds predictable comment region functionality for evil mode users.

#+begin_src emacs-lisp :tangle init.el

  (use-package evil-nerd-commenter
    :ensure t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbows

Who doesn't like rainbows?

*** rainbow-delimiters

Add rainbow delimiters to make it easier to keep track of nesting.

#+begin_src emacs-lisp :tangle init.el

  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** rainbow-mode

Make the background of color definitions (hex, rbg, etc.) reflect the
color they describe. Enable in a few select modes.

#+begin_src emacs-lisp :tangle init.el

  (use-package rainbow-mode
    :ensure t
    :hook (org-mode
	   emacs-lisp-mode
	   web-mode
	   js2-mode))

#+end_src

* Terminals

* File Management
