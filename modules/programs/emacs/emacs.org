#+Title: My Literal Emacs Configuration
#+author: Chris Renfrow
#+startup: show2levels

* About                                                            :noexport:

This Emacs config assumes everything is available via the load-path as
it will be under Nix.

* Table of Contents                                                     :TOC:
- [[#early-initialization][Early-initialization]]
  - [[#startup][Startup]]
  - [[#native-comp][Native Comp]]
  - [[#ui][UI]]
- [[#base][Base]]
  - [[#package-management][Package Management]]
  - [[#some-variables][Some Variables]]
  - [[#tab-behavior][Tab Behavior]]
  - [[#no-littering][No Littering]]
  - [[#fonts][Fonts]]
  - [[#keybindings][Keybindings]]
- [[#ui-1][UI]]
  - [[#line-numbers][Line Numbers]]
  - [[#color-theming][Color Theming]]
  - [[#modeline][Modeline]]
  - [[#cursor][Cursor]]
  - [[#which-key][Which Key]]
  - [[#ivy-counsel--swiper][Ivy, Counsel, & Swiper]]
- [[#org-mode][Org Mode]]
  - [[#font][Font]]
  - [[#setup][Setup]]
  - [[#org-mode-1][org-mode]]
  - [[#org-superstar][org-superstar]]
  - [[#markdown-mode][markdown-mode]]
  - [[#pandoc-mode][pandoc-mode]]
  - [[#visual-fill-column][visual-fill-column]]
  - [[#toc-org][toc-org]]
  - [[#babel][Babel]]
  - [[#evil-org][evil-org]]
  - [[#org-roam][org-roam]]
  - [[#org-drill][org-drill]]
  - [[#org-pomodoro][org-pomodoro]]
  - [[#org-present][org-present]]
- [[#code][Code]]
  - [[#language-support][Language Support]]
  - [[#treemacs][treemacs]]
  - [[#magit][magit]]
  - [[#git-gutter][git-gutter]]
  - [[#git-gutter-fringe][git-gutter-fringe]]
  - [[#company][company]]
  - [[#projectile][projectile]]
  - [[#perspective][perspective]]
  - [[#evil-nerd-commenter][evil-nerd-commenter]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#rainbow-mode][rainbow-mode]]
- [[#latex][LaTeX]]
  - [[#auctex][AUCTeX]]
- [[#terminals][Terminals]]
  - [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
- [[#file-management][File Management]]

* Early-initialization
** Startup

Measure and display startup time alongside number of garbage
collections.

#+begin_src emacs-lisp :tangle early-init.el
  (defun cr/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
      (format "%.2f seconds"
              (float-time
                (time-subtract after-init-time before-init-time)))
              gcs-done))

  (add-hook 'emacs-startup-hook #'cr/display-startup-time)
#+end_src

Ideally I would fine-tune this but after faffing about with it too
much one evening and not getting the results I want I've decided to
leave it at 100mb for now.

#+begin_src emacs-lisp :tangle early-init.el

  ;; Set default to 100mb (in bytes)
  (setq gc-cons-threshold 100000000)

  ;; Increase the amount of data which Emacs reads from the process
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

#+end_src

** Native Comp

Everything is already built by Nix.

#+begin_src emacs-lisp :tangle early-init.el
  (setq comp-deferred-compilation nil)
#+end_src

** UI

#+begin_src emacs-lisp :tangle early-init.el
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)

  (setq visible-bell t)
  (set-fringe-mode 10)
#+end_src

* Base

** Package Management
*** package-quickstart

This indicates that we would like to use generated package autoloads,
as they are provided by Nix.

#+begin_src emacs-lisp :tangle init.el
  (defvar package-quickstart t)
#+end_src

*** package & use-package

#+begin_src emacs-lisp :tangle init.el
  (require 'package)

  (eval-when-compile
    (require 'use-package))

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))

  (eval-and-compile
    (setq package-enable-at-startup nil
          use-package-expand-minimally t))
#+end_src

** Some Variables

Just some helpful values and variables like my name, email, and
default font sizes. May expand later.

#+begin_src emacs-lisp :tangle init.el
  (setq name "Chris Renfrow"
        email "dev@chrisrenfrow.me")

  (defvar cr/default-font-size 100
    "Default font-size for fixed pitch (monospaced)")
  (defvar cr/default-variable-font-size 100
    "Default font-size for variable pitch")

  (defvar cr/projects-base-directory "~/projects/code"
    "The location I keep my code projects, mostly used by =projectile=")
#+end_src

** Tab Behavior

Make =tab-width= narrower globally.

#+begin_src emacs-lisp :tangle init.el
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
#+end_src

** No Littering

I don't want random files everywhere. And rather than track down
exactly what packages are generating these random files, I'll just
call for some help from [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]].

#+begin_src emacs-lisp :tangle init.el
  (use-package no-littering
    :ensure t
    :init
    (setq user-emacs-directory "~/.cache/emacs")
    :config
    ;; Move auto-save files
    (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Move custom into it's own file
    (setq custom-file (no-littering-expand-etc-file-name "custom.el")))
#+end_src

** Fonts

I'm using [[https://typeof.net/Iosevka/][Iosevka]] throughout.

#+begin_src emacs-lisp :tangle init.el
  ;; Fixed pitch
  (set-face-attribute 'default nil :font "Iosevka" :height cr/default-font-size)
  ;; Variable pitch
  (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height cr/default-variable-font-size :weight 'regular)
#+end_src

** Keybindings

*** evil-mode

I like my Vim-like key-bindings and functionality. So we're using
[[https://evil.readthedocs.io/en/latest/overview.html][extensible vi l​ayer]] (a.k.a. evil).

#+begin_src emacs-lisp :tangle init.el
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-mode 1)
    ;; Use visual line motions outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

*** evil-collection

#+begin_src emacs-lisp :tangle init.el
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** general

I'm also making use of [[https://github.com/noctuid/general.el][general]] to make it easy to define keybindings
as I go.

#+begin_src emacs-lisp :tangle init.el

  (use-package general
    :ensure t
    :after evil
    :config
    (general-create-definer cr/leader-key
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (cr/leader-key
    "t" '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "load new theme"))

#+end_src

*** hydra

Install hydra and use it to define a helpful text-scale interface.

#+begin_src emacs-lisp :tangle init.el
  (use-package hydra
    :ensure t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("d" (text-scale-adjust 0) "default" :exit t)
    ("f" nil "finished" :exit t))

  (cr/leader-key
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* UI

** Line Numbers

Enable line-numbers globally, and then disable them for select modes.

#+begin_src emacs-lisp :tangle init.el
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for certain modes
  (dolist (mode '(org-mode-hook
                  dired-mode-hook
                  magit-mode-hook
                  vterm-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  lsp-ui-imenu-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Color Theming

Here I use =doom-themes= to give myself plenty of variety when it
comes to theming. I've been enjoying light themes lately, so I set my
default to =doom-solarized-light=.

#+begin_src emacs-lisp :tangle init.el

  (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-solarized-dark t))

#+end_src

** Modeline
*** all-the-icons

A prerequisite for =doom-modeline= (and other modes).

#+begin_src emacs-lisp :tangle init.el

  (use-package all-the-icons
    :ensure t)

#+end_src

*** doom-modeline

#+begin_src emacs-lisp :tangle init.el

  (use-package doom-modeline
    :ensure t
    :after (all-the-icons)
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 15)
             (doom-modeline-lsp t)
             (doom-modeline-github nil)
             (doom-modeline-minor-modes t)
             (doom-modeline-buffer-file-name-style 'truncate-except-project)))

#+end_src

*** minions

Reduce minor-mode clutter in the modeline.

#+begin_src emacs-lisp :tangle init.el

  (use-package minions
    :ensure t
    :config (minions-mode 1))

#+end_src

** Cursor

*** beacon

#+begin_src emacs-lisp :tangle init.el
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+end_src

** Which Key

Which key lets me preview the available key combinations during any
part of entry. Very nice for a newbie like me.

#+begin_src emacs-lisp :tangle init.el

  (use-package which-key
    :ensure t
    :config
    (setq which-key-idle-delay 1)
    (which-key-mode))

#+end_src

** Ivy, Counsel, & Swiper

They're a package-deal more or less. From the [[https://github.com/abo-abo/swiper][repo]]:

#+begin_quote
Ivy, a generic completion mechanism for Emacs.

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

Swiper, an Ivy-enhanced alternative to Isearch.
#+end_quote

Here I'm mapping some Ivy functionality to respond to vi-like
commands. I'm also making sure my search queries don't start with ~^~ by
setting =ivy-initial-inputs-alist= to ~nil~.

#+begin_src emacs-lisp :tangle init.el

  (use-package ivy
    :ensure t
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search))
    :config
    (setq ivy-initial-inputs-alist nil)
    (ivy-mode 1))

#+end_src

*** ivy-rich

Enable ivy-rich, which just adds some handy columns to the ivy buffer.

#+begin_src emacs-lisp :tangle init.el

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

*** ivy-prescient

Adds prescient support to ivy buffers.

*Note:* Requires counsel to be loaded first.

#+begin_src emacs-lisp :tangle init.el

  (use-package ivy-prescient
    :ensure t
    :after counsel
    :config
    (prescient-persist-mode 1) ; Persist prescient sorting across sessions
    (ivy-prescient-mode 1))

#+end_src

*** flx

Adds fuzzy matching to most buffers. Here we set some limits for ivy
buffers.

#+begin_src emacs-lisp :tangle init.el

  (use-package flx
    :ensure t
    :init
    (setq ivy-flx-limit 1000))

#+end_src

*** Counsel

Enable counsel and override a couple of Emacs defaults with counsel
equivalents, namely =M-x= and =C-x C-f=.

#+begin_src emacs-lisp :tangle init.el

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

* Org Mode

** Font

This makes org-mode headings more distinct by changing their face and
height to match their heading level. It also makes sure that source
blocks and such use fixed-width faces.

#+begin_src emacs-lisp :tangle init.el
  (defun cr/org-font-setup ()
      ;; Set faces for heading levels
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "Iosevka Etoile" :weight 'light :height (cdr face)))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil                 :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil               :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil                  :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil                 :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil              :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil       :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil             :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil              :inherit 'fixed-pitch)
      (set-face-attribute 'line-number nil               :inherit 'fixed-pitch)
      (set-face-attribute 'line-number-current-line nil  :inherit 'fixed-pitch))
#+end_src

** Setup

Set some org-mode configuration values to tailor it's presentation and
behavior.

#+begin_src emacs-lisp :tangle init.el
  (defun cr/org-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))
#+end_src

** org-mode

#+begin_src emacs-lisp :tangle init.el
  (use-package org
    :ensure t
    :commands (org-capture org-agenda)
    :hook (org-mode . cr/org-setup)
    :config
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-ellipsis "▿"
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-cycle-separator-lines 2
          org-startup-folded 'content)
    (cr/org-font-setup))

  (cr/leader-key
    "o" '(:ignore t :which-key "org")
    "oi" '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :whick-key "insert link")
    "oa" '(org-agenda :which-key "status")
    "ot" '(org-todo-list :which-key "todos")
    "oc" '(org-capture t :which-key "capture")
    "ox" '(org-export-dispatch t :which-key "export"))
#+end_src

** org-superstar

Superstar replaces org-mode heading markers with whatever symbols one
prefers.

#+begin_src emacs-lisp :tangle init.el
  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-hide-leading-stars t
          org-superstar-leading-bullet ?\s
          org-indent-mode-turns-on-hiding-stars nil
          org-superstar-remove-leading-stars t
          org-superstar-cycle-headline-bullets nil ; changes cycling behavior
          org-superstar-headline-bullets-list '("⁙" "⁘" "⁖" "⁚" "‧")))
#+end_src

** markdown-mode

#+begin_src emacs-lisp :tangle init.el
  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'"
    :config
    (setq markdown-command "markdown")

    (defun cr/set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.5)
          (markdown-header-face-2 . 1.2)
          (markdown-header-face-3 . 1.1)
          (markdown-header-face-4 . 1.0)
          (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))
	
    (defun cr/markdown-mode-hook ()
      (cr/set-markdown-header-font-sizes))
    (add-hook 'markdown-mode-hook 'cr/markdown-mode-hook))
#+end_src

** pandoc-mode

#+begin_src emacs-lisp :tangle init.el
  (use-package pandoc-mode
    :ensure t)
#+end_src

** visual-fill-column

Make it so org-mode and markdown-mode buffers are centered using
=visual-fill-column=.

#+begin_src emacs-lisp :tangle init.el
  (defun cr/doc-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook ((org-mode . cr/doc-mode-visual-fill)
           (markdown-mode . cr/doc-mode-visual-fill)))
#+end_src

** toc-org

Dynamically generates a table of contents for org-files. Nice for
larger org files like this one.

#+begin_src emacs-lisp :tangle init.el
  (use-package toc-org
    :ensure t
    :after org
    :hook ((org-mode . toc-org-mode)
           (markdown-mode . toc-org-mode))
    :bind ("C-c C-o" . toc-org-markdown-follow-thing-at-point))
#+end_src

** Babel
*** Babel Languages

#+begin_src emacs-lisp :tangle init.el
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)))
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

*** Structure Templates

Adds org structure templates for languages I commonly work with. Also
enables easy-templates, which turns the shortcut to generate an Emacs
Lisp source code block from =C-c C-, l e= to just =< e l TAB=.

*Note:* easy-templates don't seem to work?

#+begin_src emacs-lisp :tangle init.el
  (with-eval-after-load 'org
    ;; Required as of Org 9.2 to use easy-templates
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("nix" . "src nix"))
    (add-to-list 'org-structure-template-alist '("clang" . "src c"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))
#+end_src

** evil-org

#+begin_src emacs-lisp
  (use-package "evil-org"
    :ensure t
    :after org
    :hook
    ((org-mode . evil-org-mode)
     (evil-org-mode . (lambda ()
                        (evil-org-set-key-theme
                         '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** org-roam

Org roam, a.k.a. my second-brain.

#+begin_src emacs-lisp :tangle init.el
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t
          cr/daily-note-filename "%<%Y-%m-%d>.org"
          cr/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
    :custom
    (org-roam-directory "~/documents/notes/roam/")
    (org-roam-dailies-directory (concat org-roam-directory "journal/"))
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
     `(("d" "default" entry
        "* %?"
        :if-new (file+head ,cr/daily-note-filename
                           ,cr/daily-note-header))
       ("t" "task" entry
        "* TODO %?\n\t%U\n\t%a\n\t%i"
        :if-new (file+head+olp ,cr/daily-note-filename
                               ,cr/daily-note-header
                               ("Tasks"))
        :empty-lines 1)
       ("l" "log entry" entry
        "* %<%H:%M> - %?"
        :if-new (file+head+olp ,cr/daily-note-filename
                               ,cr/daily-note-header
                               ("Log")))
       ("j" "journal" entry
        "* %<%H:%M> - Journal\t:journal:\n\n%?\n\n"
        :if-new (file+head+olp ,cr/daily-note-filename
                               ,cr/daily-note-header
                               ("Log")))
       ("m" "meeting" entry
        "* %<%H:%M> - %^{Meeting Title}\t:meetings:\n\n%?\n\n"
        :if-new (file+head+olp ,cr/daily-note-filename
                               ,cr/daily-note-header
                               ("Log")))))
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n d" . org-roam-dailies-find-date)
     ("C-c n c" . org-roam-dailies-capture-today)
     ("C-c n C r" . org-roam-dailies-capture-tomorrow)
     ("C-c n t" . org-roam-dailies-goto-today)
     ("C-c n y" . org-roam-dailies-goto-yesterday)
     ("C-c n r" . org-roam-dailies-goto-tomorrow)
     ("C-c n g" . org-roam-graph)
     :map org-mode-map
     (("C-c n i" . org-roam-node-insert)
     ;("C-c n I" . org-roam-insert-immediate)
      ))
    :config
    (org-roam-db-autosync-mode))
#+end_src

** org-drill

#+begin_src emacs-lisp :tangle init.el
  (use-package org-drill
    :ensure t
    :config
    (setq org-roam-db-node-include-function
          (lambda () (not (member "drill" (org-get-tags))))))

  (cr/leader-key
    "od" '(:ignore t :which-key "org-drill")
    "odd" '(org-drill :which-key "drill")
    "odr" '(org-drill-resume :which-key "resume"))
#+end_src

** org-pomodoro

#+begin_src emacs-lisp :tangle init.el
  (use-package org-pomodoro
    :ensure t
    :after org
    :config
    (setq org-pomodoro-manual-break t
          org-pomodoro-keep-killed-time t
          org-pomodoro-start-sound "~/.emacs.d/sounds/focus_bell.wav"
          org-pomodoro-short-break-sound "~/.emacs.d/sounds/three_beeps.wav"
          org-pomodoro-long-break-sound "~/.emacs.d/sounds/three_beeps.wav"
          org-pomodoro-finished-sound "~/.emacs.d/sounds/meditation_bell.wav"))

  (cr/leader-key
   "op" '(org-pomodoro :which-key "pomodoro"))
#+end_src

** org-present

Minimalist presentation minor-mode within org-mode.

#+begin_src emacs-lisp :tangle init.el
  (use-package org-present
    :ensure t)
#+end_src
 

* Code
** Language Support
*** lsp-mode

Language Server Protocol (LSP), also known as /"that one cool thing\
Microsoft did"/.

There's a lot going on with =lsp-mode=, so we've set a keymap prefix
paired with which-key integration to make it easy to explore.

#+begin_src emacs-lisp :tangle init.el
  (use-package lsp-mode
    :ensure t
    :hook (prog-mode . lsp)
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l"
          lsp-use-plists t)
    :custom
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    :config
    (lsp-enable-which-key-integration t))
#+end_src

*** lsp-ui

Adds some UI enhancements for =lsp-mode= to give us that
comfy IDE vibe.

#+begin_src emacs-lisp :tangle init.el
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-position 'bottom))
#+end_src

*** lsp-treemacs

Adds some lsp-specific =treemacs= buffers, like symbol information, type
hierarchy, and other things one might see in a modern IDE.

#+begin_src emacs-lisp :tangle init.el
  (use-package lsp-treemacs
    :ensure t
    :after lsp)
#+end_src

*** lsp-ivy

#+begin_src emacs-lisp :tangle init.el
  (use-package lsp-ivy
    :ensure t
    :after lsp)
#+end_src

*** flycheck

#+begin_src emacs-lisp :tangle init.el
  (use-package flycheck
    :ensure t)
#+end_src

*** C
*** Rust

Disabling for now.

#+begin_src emacs-lisp :tangle no
  (use-package rust-mode
    :ensure t
    :mode "\\.rs\\'"
    :init (setq rust-format-on-save t))
#+end_src

Pulling some inspiration from https://robert.kra.hn/posts/rust-emacs-setup/#rust-emacs-configuration-in-detail

#+begin_src emacs-lisp :tangle init.el
  (use-package rustic
    :ensure t
    :after lsp-mode
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    ;; :custom
    ;; (lsp-rust-analyzer-cargo-watch-command "clippy")
    ;; (lsp-rust-analyzer-server-display-inlay-hints t)
    ;; (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    ;; (lsp-rust-analyzer-display-chaining-hints t)
    ;; (lsp-rust-analyzer-display-closure-return-type-hints t)
    ;; (lsp-rust-analyzer-display-parameter-hints t)
    ;; (lsp-rust-analyzer-display-reborrow-hints t)
    :config
    (setq rustic-format-on-save t))
#+end_src

*** Haskell

#+begin_src emacs-lisp :tangle init.el
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'"
    :init (setq haskell-program-name "ghci"))
#+end_src

*** Python

#+begin_src emacs-lisp :tangle init.el
  (use-package python-mode
    :ensure t
    :mode  "\\.py\\'")
#+end_src

*** Nix

**** rnix-lsp
A stub until this package is officially released or I add it manually.

#+begin_src emacs-lisp :tangle no
  (use-package "rnix-lsp"
    ensure: t)
#+end_src

**** nix-mode

#+begin_src emacs-lisp :tangle init.el
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'"
    :init (add-hook 'before-save-hook 'nix-format-before-save)) 
#+end_src
** treemacs

Enable and customize treemacs, a file browser buffer. Also add several
treemacs extensions that compliment other packages in use.

#+begin_src emacs-lisp :tangle init.el
  (use-package treemacs
    :ensure t
    :config
    (treemacs-filewatch-mode 1)
    (treemacs-follow-mode 1)
    (treemacs-project-follow-mode 1)
    (treemacs-git-mode 'deferred)
    (treemacs-indent-guide-mode 1))

  (use-package treemacs-icons-dired
    :ensure t
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-all-the-icons
    :ensure t
    :after (treemacs all-the-icons)
    :config (treemacs-load-theme "all-the-icons"))

  (use-package treemacs-evil
    :ensure t
    :after (treemacs evil))

  (use-package treemacs-projectile
    :ensure t
    :after (treemacs projectile))

  (use-package treemacs-magit
    :ensure t
    :after (treemacs magit))

  (use-package treemacs-perspective
    :ensure t
    :after (treemacs persp-mode)
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src

** magit

#+begin_src emacs-lisp :tangle init.el
  (use-package magit
    :ensure t
    :commands magit-status)
#+end_src

** git-gutter

Display git-status indicators in the gutter like a /certain/ modern IDE.

#+begin_src emacs-lisp :tangle init.el
  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.2))
#+end_src

** git-gutter-fringe

Yoink the fringe settings from doomemacs because it looks great.

#+begin_src emacs-lisp :tangle init.el
  (use-package git-gutter-fringe
    :ensure t
    :config
    ;; https://github.com/doomemacs/doomemacs/issues/2246
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

** company

#+begin_src emacs-lisp :tangle init.el
  (use-package company
      :ensure t
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind
      (:map company-active-map
            ("<tab>" . company-complete-selection))
      (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))

    (use-package company-box
      :ensure t
      :hook (company-mode . company-box-mode))
#+end_src

** projectile

Projectile is a project management library.

#+begin_src emacs-lisp :tangle init.el
  (defun cr/switch-project-action ()
    "Switch to a perspective named after the project, start `magit-status'."
    (persp-switch (projectile-project-name))
    (magit-status))

  (use-package projectile
    :ensure t
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/projects/code")
      (setq projectile-project-search-path '("~/projects/code")))
    (setq projectile-switch-project-action #'cr/switch-project-action))

  (cr/leader-key
    "p" '(:ignore t :which-key "projectile")
    "pa" '(projectile-add-known-project :which-key "make project known to projectile")
    "pp" '(projectile-switch-project :which-key "switch to project")
    "pf" '(projectile-find-file :which-key "find file in current project"))

  (use-package counsel-projectile
    ;; Extremely slow for some reason, disabling for now
    :disabled
    :ensure t
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

** perspective

Perspective gives us "lenses" to view our buffers through. Everything
is kept in it's assigned perspective, making it easy to switch between
several projects during one session.

#+begin_src emacs-lisp :tangle init.el
  (use-package perspective
    :ensure t 
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x b" . persp-ivy-switch-buffer)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode))
#+end_src

** evil-nerd-commenter

Adds predictable comment region functionality for evil mode users.

#+begin_src emacs-lisp :tangle init.el
  (use-package evil-nerd-commenter
    :ensure t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** rainbow-delimiters

Add rainbow delimiters to make it easier to keep track of nesting.

#+begin_src emacs-lisp :tangle init.el
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** rainbow-mode

Make the background of color definitions (hex, rbg, etc.) reflect the
color they describe. Enable in a few select modes.

#+begin_src emacs-lisp :tangle init.el
  (use-package rainbow-mode
    :ensure t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           js2-mode))
#+end_src

* LaTeX
** AUCTeX
#+begin_src emacs-lisp :tangle init.el
  (use-package auctex
    :defer t
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-command-default "LatexMk")
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (TeX-global-PDF-mode t)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t))

  (use-package auctex-latexmk
    :after auctex
    :ensure t
    :config
    (auctex-latexmk-setup))
#+end_src
* Terminals
** vterm

#+begin_src emacs-lisp :tangle init.el
  (use-package vterm)

  (cr/leader-key
    "s" '(:ignore t :which-key "shells")
    "sv" '(:ignore t :which-key "vterm")
    "svv" '(vterm :which-key "open vterm in the current buffer"))
#+end_src

** vterm-toggle

Toggles to and from the vterm buffer. Here I've set it up to
automatically cd to the same directory as the file buffer I enter the
key-presses in.

#+begin_src emacs-lisp :tangle init.el
    (use-package vterm-toggle
      :ensure t
      :after vterm
      :config
      :bind (:map vterm-mode-map
                  ("C-<return>" . vterm-toggle-insert-cd)))

    (cr/leader-key
      "svc" '(vterm-toggle-cd :which-key
                              "toggle and cd vterm to the current file buffer's directory")
      "svt" '(vterm-toggle :which-key
                           "toggle between the current buffer and the vterm buffer"))
#+end_src

* File Management
 
